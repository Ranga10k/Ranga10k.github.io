<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>web复写</title>
    <url>/2021/10/01/hello-world/</url>
    <content><![CDATA[<p>HTML source</p>
<p>F12查看源码</p>
<p>网页访问流程：客户端发请求，服务器</p>
<h2 id="Cookies"><a href="#Cookies" class="headerlink" title="Cookies"></a>Cookies</h2><p>Cookie是储存用户信息，终端不会记录用户信息，cookie保存在游览器上</p>
<h2 id="location"><a href="#location" class="headerlink" title="location"></a>location</h2><p>网站状态码</p>
<p>1xx请求成功</p>
<p>2xx请求响应成功</p>
<p>3xx重新定向</p>
<p>4xx客户端问题</p>
<p>5xx服务器问题</p>
<p>用burp抓包</p>
<h2 id="Get-Post"><a href="#Get-Post" class="headerlink" title="Get_Post"></a>Get_Post</h2><p>Get post的不同，post比较安全</p>
<p>Get写在url要用？赋值</p>
<p>Post写在body</p>
<h2 id="babyrce"><a href="#babyrce" class="headerlink" title="babyrce"></a>babyrce</h2><p>@eveal函数漏洞可以执行（）中文件的php代码，不是php就显示内容</p>
<p>通过给（）内的变量赋值执行</p>
<h2 id="ezinclude"><a href="#ezinclude" class="headerlink" title="ezinclude"></a>ezinclude</h2><p>文件包含，访问包含中的文件就会直接显示，include（）会显示不是php文件的内容，会执行符合php语法的内容</p>
<h2 id="babyphp"><a href="#babyphp" class="headerlink" title="babyphp"></a>babyphp</h2><p>php语言的强比较和数据类型转换，intval函数的意义通过使用指定的进制 <code>base</code> 转换（默认是十进制），返回变量 <code>value</code> 的 int 数值</p>
<h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><p>请求头的应用</p>
<p>请求头的格式是人为规定的</p>
<p>127.0.0.1本地请求</p>
<p>Reffer上一个请求的ip地址</p>
<p>User-agent 游览器</p>
<h2 id="babyupload"><a href="#babyupload" class="headerlink" title="babyupload"></a>babyupload</h2><p>文件上传</p>
<p>用php写一句话木马（用@evaal），用网站的上传功能上传到服务器，用burp伪造文件格式绕过，通过访问上传的文件控制网站</p>
<h2 id="babyssrf"><a href="#babyssrf" class="headerlink" title="babyssrf"></a>babyssrf</h2><p>可以执行？url=后的代码，网址就显示网址的内容，若是本地文件就直接显示，</p>
<h2 id="Google"><a href="#Google" class="headerlink" title="Google"></a>Google</h2><p>用sql注入，sql语句会先执行=号后的sql语句</p>
<h1 id="babyphp2"><a href="#babyphp2" class="headerlink" title="babyphp2"></a>babyphp2</h1><p>md5值，用哈希算法加密，哈希算法不能逆推，但有极少数数据的哈希值是相同的，可以md5碰撞，md5无法识别数组会返回false，可以用两个数组让MD5值相同</p>
]]></content>
  </entry>
  <entry>
    <title>markdown使用方法</title>
    <url>/2021/10/02/markdown/</url>
    <content><![CDATA[<h1 id="1-标题的使用"><a href="#1-标题的使用" class="headerlink" title="1.标题的使用"></a>1.标题的使用</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">用#加空格，空格后写标题，#号越多标题等级越低</span><br><span class="line">    # <span class="number">1</span></span><br><span class="line">    ## <span class="number">2</span></span><br><span class="line">    ### <span class="number">3</span></span><br><span class="line">    #### <span class="number">4</span></span><br><span class="line">    ##### <span class="number">5</span></span><br><span class="line">    ###### <span class="number">6</span></span><br><span class="line">    共有六个等级</span><br><span class="line">    </span><br></pre></td></tr></table></figure>

<h1 id="1"><a href="#1" class="headerlink" title="1"></a>1</h1><h2 id="2"><a href="#2" class="headerlink" title="2"></a>2</h2><h3 id="3"><a href="#3" class="headerlink" title="3"></a>3</h3><h4 id="4"><a href="#4" class="headerlink" title="4"></a>4</h4><h5 id="5"><a href="#5" class="headerlink" title="5"></a>5</h5><h6 id="6"><a href="#6" class="headerlink" title="6"></a>6</h6><h1 id="2代码块的使用"><a href="#2代码块的使用" class="headerlink" title="2代码块的使用"></a>2代码块的使用</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">用```后加代码的语言 </span><br><span class="line">    ```java   </span><br></pre></td></tr></table></figure>

<p><strong>注意</strong></p>
<p>`要切换成英文</p>
<h1 id="3加粗，高亮，删除符"><a href="#3加粗，高亮，删除符" class="headerlink" title="3加粗，高亮，删除符"></a>3加粗，高亮，删除符</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">*斜体* or _强调_</span><br><span class="line">**加粗** or __加粗__</span><br><span class="line">***粗斜体*** or ___粗斜体__</span><br><span class="line">    </span><br></pre></td></tr></table></figure>



<p><em>斜体</em> or <em>强调</em> <strong>加粗</strong> or <strong>加粗</strong> <em><strong>粗斜体</strong></em> or _<strong>粗斜体</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">高亮</span><br><span class="line">`` `包裹起来` ``</span><br></pre></td></tr></table></figure>

<p><code>包裹起来</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">~~加删除的内容~~</span><br></pre></td></tr></table></figure>

<p><del>加删除的内容</del></p>
<h1 id="4图片内嵌"><a href="#4图片内嵌" class="headerlink" title="4图片内嵌"></a>4图片内嵌</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">![替换的文字]（打开图片的url或绝对地址）</span><br></pre></td></tr></table></figure>



<p><img src="D:\ask.jpg" alt="asuka"></p>
<h1 id="5link"><a href="#5link" class="headerlink" title="5link"></a>5link</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[替换的文字]（url）</span><br></pre></td></tr></table></figure>

<p><a href="https://www.google.com.hk/">百度</a></p>
]]></content>
  </entry>
  <entry>
    <title>phpstorm debug</title>
    <url>/2021/10/11/php/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>用的是phpstudy的集成环境，直接在phpstudy里打开php配置项配置debug</p>
<p>端口接听默认为9000我改成了9001</p>
<p><img src="./picture/k.jpg" alt="picture"></p>
<p>打开php.ini添加debug配置idekey</p>
<p><img src="./picture/j.jpg" alt="picture"></p>
<p>打开phpstorm文件打开设置</p>
<p><img src="./picture/k.jpg" alt="picture"></p>
<p>选择服务器</p>
<p>名称自定义写什么都没关系</p>
<p>主机写你的本地php网址，或者本地ip127.0.0.1</p>
<p><img src="./picture/ii.jpg" alt="picture"></p>
<p>点开右上角的运行调试配置，新建一个phpweb配置项</p>
<p><img src="./picture/image-20211016204431247.png" alt="picyure"></p>
<p>把服务器设置成之前配置的</p>
<p>然后点右上角的📞图样，打开监听，在点旁边的绿色肥甲虫，debug</p>
]]></content>
  </entry>
  <entry>
    <title>sqlilab 1-5</title>
    <url>/2021/10/19/sqlilab/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一"><a href="#一" class="headerlink" title="一"></a>一</h1><p>![picture](./picture/屏幕截图 2021-10-19 191622.png)</p>
<p>题目提示让我们给id一个数字的值，那就让id=1</p>
<p>![picture](./picture/屏幕截图 2021-10-19 191848.png)</p>
<p>能成功查询，接下来就是判断注点</p>
<p>尝试id=1‘</p>
<p>![picture](./picture/屏幕截图 2021-10-19 192146.png)</p>
<p>报错了很好，说明找到了注点，用’闭合后 报错 ，知道where id=’’，是字符类型的注入</p>
<p>用union联合注入，但前提条件是联合的两个表列数相同，所以先用order by</p>
<p>判断列数</p>
<p>构造playload</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?id=<span class="number">1</span><span class="string">&#x27; order by 1...--+ /*为什么要用--+（也就是-- ），在输入？id=1&#x27;</span></span><br><span class="line">    后php中的sql查询语句会变成where id = <span class="string">&#x27;1&#x27;</span><span class="string">&#x27;,有一个&#x27;</span>会都出导致报错，这时我们在<span class="number">1</span>’的后面添加sql查询语句会被都出的<span class="string">&#x27;注释为id的值:where id=&#x27;</span><span class="number">1</span><span class="string">&#x27;sql语句&#x27;</span>，所以要用注释符把多出的<span class="string">&#x27;注释掉，php就能正确识别sql查询语句了</span></span><br></pre></td></tr></table></figure>

<p>order by 后面的数字不断增加直到报错为止</p>
<p>![picture](./picture/屏幕截图 2021-10-19 195701.png)</p>
<p>到4报错了，说明列数有3列</p>
<p>接下来就是判断回显点</p>
<p>构造playload</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?id=-<span class="number">1</span><span class="string">&#x27; union select 1,2,3 --+</span></span><br></pre></td></tr></table></figure>

<p>![picture](./picture/屏幕截图 2021-10-19 201147.png)</p>
<p>发现显示了2和3，说明回显点在2，3号位</p>
<p>接下来就是爆数据库名，要用到databa（）sql的元数据</p>
<p>构造playload</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?id=-<span class="number">1</span><span class="string">&#x27; union select 1,2,database()--+； //database（）位置在2，3都没关系</span></span><br></pre></td></tr></table></figure>

<p>![picture](./picture/屏幕截图 2021-10-19 201754.png)</p>
<p>这样就得到了数据库名为security</p>
<p>接着就是爆表名</p>
<p>首先得知道mysql自带的表</p>
<p>information_schema.schemata：记录数据库信息的表<br>information_schema.tables：记录表名信息的表<br>information_schema.columns：记录列名信息的表<br>schema_name 数据库名<br>table_name 表名<br>column_name 列名<br>table_schema 数据库名</p>
<p>构造playload</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?id=-<span class="number">1</span><span class="string">&#x27; union seclect 1,2,gruop_concat(table.name) from information_schema.tables where table_schema=&#x27;</span>security<span class="string">&#x27;|database()--+//sql查询语句的意思是在记录表名信息的表中查询当前数据库下的所有表，group_concat的作用是去除冗余的数据并合并成一行输出，因为这道只有一行的回显点</span></span><br></pre></td></tr></table></figure>

<p>![picture](./picture/屏幕截图 2021-10-19 203543.png)</p>
<p>查到了表名，用户的账号密码肯定是在users的表里，但我们要查询还需要知道</p>
<p>表里有什么字段所以接下是爆字段</p>
<p>构造playload</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?id=-<span class="number">1</span><span class="string">&#x27; union seclec 1,2,group_concat(column_name) from information_schema.columns where table_name=&#x27;</span>users<span class="string">&#x27;--+//从所有列名的表中查找表名为users的列</span></span><br></pre></td></tr></table></figure>



<p>![picture](./picture/屏幕截图 2021-10-19 205422.png)</p>
<p>找到列username，password</p>
<p>接着用sql语句查询他们的值</p>
<p>构造playload</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?id=-<span class="number">1</span><span class="string">&#x27; union select 1,2,group_concat(password,username) from users--+</span></span><br></pre></td></tr></table></figure>

<p>![picture](./picture/屏幕截图 2021-10-19 210030.png)</p>
<p>查询成功</p>
<h1 id="二"><a href="#二" class="headerlink" title="二"></a>二</h1><p>![picture](./picture/屏幕截图 2021-10-19 210153.png)</p>
<p>题目要求和第一题一样</p>
<p>首先找注点</p>
<p>尝试id=1</p>
<p>![picture](./picture/屏幕截图 2021-10-19 210418.png)</p>
<p>成功</p>
<p>再尝试?id=1’</p>
<p>![picture](./picture/屏幕截图 2021-10-19 210615.png)</p>
<p>从报错中看出php中的sql语句是where id=</p>
<p>说明是数字型的注入因为用的是同一张表所以playload只是注点不同，其他都相同</p>
<p>构造playload</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?id=-<span class="number">1</span> union select <span class="number">1</span>,<span class="number">2</span>,group_concat(password,username) <span class="keyword">from</span> users--+</span><br></pre></td></tr></table></figure>



<p>后面不加注释因为没有需要被注释的字符</p>
<p><img src="/.com//image-20211019211519081.png" alt="picture"></p>
<p>查询成功</p>
<h1 id="三"><a href="#三" class="headerlink" title="三"></a>三</h1><p><img src="/.com//image-20211019211708416.png" alt="picture"></p>
<p>同样先尝试id=1</p>
<p><img src="/.com//image-20211019211853243.png" alt="picture"></p>
<p>成功</p>
<p>接着尝试id=1’</p>
<p><img src="/.com//image-20211019212026044.png" alt="picture"></p>
<p>发现报错的和第一题很相似，尝试用第一题的playload试一下</p>
<p><img src="/.com//image-20211019212238414.png" alt="picture"></p>
<p>寄了</p>
<p>再仔细看下报错信息</p>
<p><img src="/.com//Users\rangaork\AppData\Roaming\Typora\typora-user-images\image-20211019212355663.png" alt="image-20211019212355663"></p>
<p>发现问题了，比第一题多了一个）也就是说多了一个（）的闭合，而我们只闭合**’**</p>
<p>所以注点要变成id=-1‘）尝试一下</p>
<p><img src="/.com//image-20211019212805821.png" alt="picture"></p>
<p>やったぜ</p>
<h1 id="四"><a href="#四" class="headerlink" title="四"></a>四</h1><p><img src="/.com//image-20211019213234858.png" alt="picture"></p>
<p>一样先尝试id=1</p>
<p><img src="/.com//image-20211019213352241.png" alt="image-20211019213352241"></p>
<p>成功</p>
<p>再尝试id=1’</p>
<p><img src="/.com//image-20211019213538450.png" alt="image-20211019213538450"></p>
<p>居然成功了</p>
<p>再试试id=1“</p>
<p><img src="/.com//image-20211019213814592.png" alt="image-20211019213814592"></p>
<p>成功报错了，看来这次是”“闭合</p>
<p>构造playload</p>
<p>等一下</p>
<p><img src="/.com//image-20211019213955043.png" alt="image-20211019213955043"></p>
<p>还有一个）</p>
<p>那就和第三题差不多</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?id=-<span class="number">1</span><span class="string">&quot;)  union select 1,2,group_concat(password,username) from users--+</span></span><br></pre></td></tr></table></figure>

<p><img src="/.com//image-20211019214257823.png" alt="image-20211019214257823"></p>
<p>ok</p>
<h1 id="五"><a href="#五" class="headerlink" title="五"></a>五</h1><p><img src="/.com//image-20211019214406388.png" alt="image-20211019214406388"></p>
<p>老套路</p>
<p><img src="/.com//image-20211019214532459.png" alt="image-20211019214532459"></p>
<p>有点不太一样，不管先试试id=1’</p>
<p><img src="/.com//image-20211019214733943.png" alt="image-20211019214733943"></p>
<p>报错能显示出来</p>
<p>看的注入点是字符’闭合</p>
<p>但没有写回</p>
<p>那就试试floor（rand(0）*2)报错注入</p>
<p>用group by的重复</p>
<p>floor(rand(0)*2)的作用是伪随机生成0，1</p>
<p>groupby函数在起作用时会新建一个表来存数据，并会执行两次用floor(rand(0)*2)会产生两个一的时候就会键名重复报错并会输出在groupby中的sql语句</p>
<p>构造playload</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?id=-<span class="number">1</span><span class="string">&#x27; union select count(*),count(*),concat(&#x27;</span>~<span class="string">&#x27;,floor(rand(0)*2),(select username from users limit 0,1)) as a from information_schema.table group by a--+//count()和groupby一起使用报错注入中无法使用group_concat所以用limit来限制行数</span></span><br></pre></td></tr></table></figure>





<p><img src="/.com//image-20211019220805119.png" alt="image-20211019220805119"></p>
<p>成功.</p>
]]></content>
  </entry>
  <entry>
    <title>sqlilab17</title>
    <url>/2021/10/25/sqlilab17/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="updata报错注入"><a href="#updata报错注入" class="headerlink" title="updata报错注入"></a>updata报错注入</h1><p>![](.\picture\屏幕截图 2021-10-25 214004.png)</p>
<p>看都题目passwor reset，重置密码，在输对用户名的正确的情况下会把用户名的密码更改为我们输入的密码</p>
<p>![](.\picture\屏幕截图 2021-10-25 214449.png)</p>
<p>![](.\picture\屏幕截图 2021-10-25 214501.png)</p>
<p>再来康康源码</p>
<p>![](.\picture\屏幕截图 2021-10-25 214805.png)</p>
<p>我们看到他先用select查出了用户名密码然后再用了updata把新的密码上传</p>
<p>password=’$password‘说明这里要用’闭合</p>
<p>再来看返回的值</p>
<p>![](.\picture\屏幕截图 2021-10-25 214501.png)</p>
<p>没有回显点，也不是布朗类型的返回，看看会不会报错</p>
<p>![](.\picture\屏幕截图 2021-10-25 215546.png)</p>
<p>有报错那就用报错注入</p>
<p>构造playload</p>
<p>1’ and updatexml(1,concat(0x76,(select group_concat(password) from users),0x76),2)#</p>
<p>![](.\picture\屏幕截图 2021-10-25 220011.png)</p>
<p>报错了，意思是不能在要updata的表里查数据，那么我们套一层子查询，间接查询</p>
<p>重新构造playload</p>
<p>重新构造playload</p>
<p>1’ and updatexml(1,concat(0x7e,(select group_concat(password) from (select password from users) as a),0x7e),1)#</p>
<p>![](.\picture\屏幕截图 2021-10-25 221120.png)</p>
<p>updatexml()的报错原理和groupby差不多，在updatexml的三个参数中输入不符合xml语法的内容就会报错并执行输入的语句</p>
]]></content>
  </entry>
  <entry>
    <title>sqli_lab1819</title>
    <url>/2021/10/26/ssqlilab1819/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="sql注入之header报错注入"><a href="#sql注入之header报错注入" class="headerlink" title="sql注入之header报错注入"></a>sql注入之header报错注入</h1><h3 id="首先要知道什么是header头"><a href="#首先要知道什么是header头" class="headerlink" title="首先要知道什么是header头"></a>首先要知道什么是header头</h3><p>header是发送请求时携带的头部信息。通常一些鉴权的信息：authentication/cookie、响应的数据格式：content-type等等的设置。当然响应的数据也会返回一些头部信息。</p>
<p>格式是 域名 ：域值</p>
<h1 id="18"><a href="#18" class="headerlink" title="18"></a>18</h1><p>![](.\picture\屏幕截图 2021-10-26 120723.png)</p>
<p>输入用户名和密码，在第17关改过的</p>
<p>![](.\picture\屏幕截图 2021-10-26 120949.png)</p>
<p>登入成功，并把User Agent的内容显示出来了</p>
<p>这个头是显示用户信息的头</p>
<p>所以就可在这个头进行注入</p>
<p>![](.\picture\屏幕截图 2021-10-26 121622.png)</p>
<p>因为该题没有回显点，所以用报错注入</p>
<p>playload: ‘ or uodate(1,concat(‘#’,(select group_concat(password) from users),’#’ ),2)#</p>
<h1 id="19"><a href="#19" class="headerlink" title="19"></a>19</h1><p>在来看看19的</p>
<p>![](.\picture\屏幕截图 2021-10-26 171745.png)</p>
<p>输出的是Referer的值，说以把Referer的值改成我们的sql注入语句，19也没有回显点，也用报错注入，</p>
<p>![](.\picture\屏幕截图 2021-10-26 172953.png)</p>
<p>报错，这句话的意思是列的数量不匹配</p>
<p>将or改成，</p>
<p>1’,updatexml(1,concat(‘<del>‘,(select group_concat(password) from users),’</del>‘),1))#</p>
<p>![](.\picture\屏幕截图 2021-10-26 195738.png)</p>
<p>成功</p>
]]></content>
  </entry>
  <entry>
    <title>sqlilab_24</title>
    <url>/2021/10/27/sqlilab-24/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h1><p>在对第一次插入数据的时候对插入的数据进行了过滤，但如果只是对特殊字符添加/进行转译，但由于用于转译/不会被写入数据库中，插入数据库中的还是我们输入的语句，在再次调用数据库中我们插入的数据的时候，如果完全信任了数据库中的数据不加过滤的话就会，引起二次注入</p>
<h1 id="sqlilab-24"><a href="#sqlilab-24" class="headerlink" title="sqlilab_24"></a>sqlilab_24</h1><p>![](./picture/屏幕截图 2021-10-27 110239.png)</p>
<p>先试试在登入界面注入</p>
<p>Dhakkan’#</p>
<p>![](./picture/屏幕截图 2021-10-27 110705.png)</p>
<p>失败了</p>
<p>查看源码</p>
<p>![](./picture/屏幕截图 2021-10-27 113114.png)</p>
<p>发现添加了过滤</p>
<p>在看看创建新用户的源码</p>
<p>![](./picture/屏幕截图 2021-10-27 113445.png)</p>
<p>还是添加了过滤</p>
<p>在看看更改密码的源码</p>
<p>![](./picture/屏幕截图 2021-10-27 113909.png)</p>
<p>没有对username进行过滤，并且查询语句中还用上username</p>
<p>那我们就对新建一个username，对username进行构造</p>
<p>新建一个用户名为Dhakkan’#密码为123</p>
<p>![](.\picture\屏幕截图 2021-10-27 210433.png)</p>
<p>然后在进行改密码操作将密码改成321</p>
<p>![](.\picture\屏幕截图 2021-10-27 210651.png)</p>
<p>此时更改密码的语句就会变为username=’Dhakkan’#’and password=’321’</p>
<p>这样就形成了一个sql注入语句变成了更改了Dhakkan的密码这样我们就能用321登入账号Dhakkan了</p>
<p>![](.\picture\屏幕截图 2021-10-27 211541.png)</p>
<p>成功用321登入改账号</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2021/10/29/sqlizj/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h1><p>在两个select注入语句之间用可用；隔开，</p>
<p>如果在php中用来mysqli_mulit_qurry()函数来执行sql注入语句的时候，可以使用堆叠注入，堆叠注入可以做到对数据库的改增删操作，</p>
<h1 id="过滤绕过"><a href="#过滤绕过" class="headerlink" title="过滤绕过"></a>过滤绕过</h1><p>在php中对单词的过滤，一般可以用双写，大写来绕过</p>
<p>![picture](.\picture\屏幕截图 2021-10-29 204544.png)</p>
<p>在sql的25关对or和and进行了过滤，所以我们输入了or但显示我们的输入为空，</p>
<p>用双写</p>
<p>![picture](.\picture\屏幕截图 2021-10-29 205014.png)</p>
<p>id=oorr</p>
<p>因为正则表达式匹配了or并把or过滤了oorr中or被过滤了就剩下了or说以可以用双写绕过</p>
<p>大写绕过</p>
<p>![picture](.\picture\屏幕截图 2021-10-29 205601.png)</p>
<p>27题过滤了union所以我们输了union被过滤了</p>
<p>前提mysql语句是对大写不敏感的所以我们在写语句的时候就可以随意大写</p>
<p>因为正则表达式并没有完全匹配所以的大写组合，那我们一个一个试</p>
<p>尝试uniON</p>
<p>![picture](.\picture\屏幕截图 2021-10-29 210052.png)</p>
<p>成功了</p>
<p>我认为短单词适合用双写，因为短字母的大写组合少比较好过滤，而且双写也比较好认，长单词相反，不过怎么绕过还是要看后端是怎么过滤的</p>
<p>如果后端的正则用了/m修饰符（换行匹配）那么双写绕过就会失效，换行匹配会把双写被匹配完的带空格的字符串也匹配，所以只能用双写，</p>
<p>![picture](.\picture\屏幕截图 2021-10-29 211346.png)</p>
<p>在27关中–+也被过滤掉了sql语句就会剩下一个‘，这时就要用and ’1‘=’1来闭合</p>
<p>因为‘1’=‘1’是恒为真</p>
<p>![picture](.\picture\屏幕截图 2021-10-29 212058.png)</p>
<p>在27题中空格也被过滤了，用%0a来绕过过滤</p>
<p>![picture](.\picture\屏幕截图 2021-10-29 212437.png)</p>
<h1 id="注释绕过"><a href="#注释绕过" class="headerlink" title="注释绕过"></a>注释绕过</h1><p>![picture](.\picture\屏幕截图 2021-10-29 212834.png)</p>
<p>在32关中‘被/注释掉了，这时候就要加%df，或其他大与128的16进制数，在gbk编码中两个16进制数来表示一个中文字符，该方法叫宽字符注入</p>
<p>![picture](.\picture\屏幕截图 2021-10-29 213336.png)</p>
<p>%df与%5c被认为是一个中文字符，而%27被剩下来被解释成了’</p>
<h1 id="orderby注入"><a href="#orderby注入" class="headerlink" title="orderby注入"></a>orderby注入</h1><p>和联合注入没什么区别，就是写语句的方式变了</p>
<p>盲注可以用rand（）在为真和为假时排列的顺序会不一样</p>
]]></content>
  </entry>
</search>
